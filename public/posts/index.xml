<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jacob&#39;s Dev Blog</title>
    <link>https://jpoly1219.github.io/posts/</link>
    <description>Recent content in Posts on Jacob&#39;s Dev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Aug 2022 16:00:39 +0900</lastBuildDate><atom:link href="https://jpoly1219.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to Concurrency in Go</title>
      <link>https://jpoly1219.github.io/posts/intro-to-concurrency-in-go/</link>
      <pubDate>Sun, 14 Aug 2022 16:00:39 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/intro-to-concurrency-in-go/</guid>
      
        <description>Concurrency is a cool topic that can be a huge asset once you get the hang of it. To be honest, I was scared to write this post at first because I myself wasn&amp;rsquo;t too comfortable with concurrency until recently. I got the basics down, so I wanted to help other beginners learn concurrency in Go. This is the first of many concurrency tutorials, so stay tuned for more!
What is concurrency and why does it matter?</description>
      
    </item>
    
    <item>
      <title>Reading and Writing Different Files in Go</title>
      <link>https://jpoly1219.github.io/posts/reading-and-writing-different-files-in-go/</link>
      <pubDate>Sun, 07 Aug 2022 09:05:39 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/reading-and-writing-different-files-in-go/</guid>
      
        <description>Reading and writing files is an important feature of your program. Not all data is stored in the same memory space as your program, and sometimes you will need to share data with other programs or view it later with a different program. Storing your data in a file is a good way to achieve these goals. Today, we will look at how you can read from and write to commonly used file types.</description>
      
    </item>
    
    <item>
      <title>Working in a Team</title>
      <link>https://jpoly1219.github.io/posts/working-in-a-team/</link>
      <pubDate>Mon, 01 Aug 2022 01:26:47 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/working-in-a-team/</guid>
      
        <description>I spend a lot of time developing solo, working on my personal projects. However, I have worked in big project teams in the past, and have had some experience working with other developers and non-developers. Here are some tips that I would like to share with you. Please understand that this is a beginner’s viewpoint and can be subjective. If there are more tips that you would like to share, please comment below!</description>
      
    </item>
    
    <item>
      <title>Imposter Syndrome</title>
      <link>https://jpoly1219.github.io/posts/imposter-syndrome/</link>
      <pubDate>Sun, 24 Jul 2022 14:33:48 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/imposter-syndrome/</guid>
      
        <description>Let’s take a slight detour from the usual programming guides. Today, I want to address the bane of all developers. The one that plagues juniors and seniors alike.
func (s *self) ImposterSyndrome() { for { doubt() fear() panic() } } s.ImposterSyndrome() “Maybe I’m not smart enough to be a developer.”
“He’s so much better at this than I am.”
“How come she gets it and I don’t, when we started the same?</description>
      
    </item>
    
    <item>
      <title>Interfaces in Go</title>
      <link>https://jpoly1219.github.io/posts/interfaces-in-go/</link>
      <pubDate>Sun, 17 Jul 2022 15:58:15 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/interfaces-in-go/</guid>
      
        <description>If you are going to use Go extensively, you need to understand how to use interfaces. Interfaces aren&amp;rsquo;t specifically a Go thing, but Go is one of the more extensive users of the feature. Interfaces allow you to write reusable code.
What are interfaces? Interfaces are a way to group objects into their common behaviors. An interface is defined by its name and the methods the objects need to define. Any object that has those methods defined &amp;ldquo;implements&amp;rdquo; the interface.</description>
      
    </item>
    
    <item>
      <title>Using Goroutines Is Slower</title>
      <link>https://jpoly1219.github.io/posts/using-goroutines-is-slower/</link>
      <pubDate>Sun, 10 Jul 2022 15:36:45 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/using-goroutines-is-slower/</guid>
      
        <description>Ah, goroutines. One of the most defining features of the Go programming language. Once you understand the syntax of goroutines and the theory behind concurrency, you feel as if you just gained a superpower. A hammer, if you will. We get so excited to make everything concurrent. I am definitely guilty. I mean, why not, right? Concurrency solves the issue of blocking code, so making everything as concurrent as possible will speed things up, right?</description>
      
    </item>
    
    <item>
      <title>Trees in Go</title>
      <link>https://jpoly1219.github.io/posts/trees-in-go/</link>
      <pubDate>Sun, 03 Jul 2022 17:04:27 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/trees-in-go/</guid>
      
        <description>Welcome back to Introduction to Data Structures in Go! In this post, we will be looking at trees. So far, we have looked at linear data structures. There was one beginning node and one end node. Data traveled in one direction: either left to right or right to left. Trees are nonlinear, which adds a layer of complexity. Trees are widely used in the programming world for many different purposes, so it is a good idea to get a firm grasp on the topic.</description>
      
    </item>
    
    <item>
      <title>Benchmarking Go Code</title>
      <link>https://jpoly1219.github.io/posts/benchmarking-go-code/</link>
      <pubDate>Sun, 26 Jun 2022 13:53:28 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/benchmarking-go-code/</guid>
      
        <description>If you have been programming in Go for some time, you probably really like the tooling that comes with it. The language itself is packed to the brim with useful tooling such as go test, go fmt, go build, etc. We have gone over testing before. Today, we will be looking at how we can benchmark our Go code.
Why you should run benchmarks Ever wondered how fast and efficient your code runs?</description>
      
    </item>
    
    <item>
      <title>Debugging Go Code With Delve</title>
      <link>https://jpoly1219.github.io/posts/debugging-go-code-with-delve/</link>
      <pubDate>Sun, 19 Jun 2022 10:41:24 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/debugging-go-code-with-delve/</guid>
      
        <description>&amp;ldquo;Genius is 1% talent and 99% hard work.&amp;rdquo;
&amp;ldquo;e = mc^2&amp;rdquo;
&amp;ndash; Albert Einstein
In the field of software development, the quotes can be changed slightly:
&amp;ldquo;Software development is 1% programming and 99% debugging.&amp;rdquo;
&amp;ldquo;errors = more code ^ 2&amp;rdquo;
&amp;ndash; Some senior developer, probably
Debugging is something all developers must go through, and it does not care about your expertise. It&amp;rsquo;s a frustrating process. To err is human, and errors will absolutely creep into your program.</description>
      
    </item>
    
    <item>
      <title>Writing Tests in Go</title>
      <link>https://jpoly1219.github.io/posts/writing-tests-in-go/</link>
      <pubDate>Sun, 12 Jun 2022 16:54:43 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/writing-tests-in-go/</guid>
      
        <description>In today&amp;rsquo;s post, we will be looking into how to write tests in Go. Test-driven development, also known as TDD, is a paradigm in which developers are encouraged to test their code as they go.
What is a test and why should I care? A test is a piece of code written to verify that your code behaves as it should. At first, this may sound quite tedious.
Meh. I know my code through and through.</description>
      
    </item>
    
    <item>
      <title>Queues in Go</title>
      <link>https://jpoly1219.github.io/posts/queues-in-go/</link>
      <pubDate>Sun, 05 Jun 2022 15:03:43 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/queues-in-go/</guid>
      
        <description>Welcome back to Introduction to Data Structures in Go! In this post, we will be looking at queues. We hear the term &amp;ldquo;queue&amp;rdquo; thrown around a lot in real life. The queue for the movie tickets is long. Man, it&amp;rsquo;s taking forever to queue up for this League match. Queues are a familiar concept for most of us.
Queues as data structures Queues are a special list, just like stacks. Unlike stacks, however, queues are known for being FIFO data structures.</description>
      
    </item>
    
    <item>
      <title>Infix to Postfix in Go</title>
      <link>https://jpoly1219.github.io/posts/infix-to-postfix-in-go/</link>
      <pubDate>Sun, 29 May 2022 14:08:22 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/infix-to-postfix-in-go/</guid>
      
        <description>Welcome back to Introduction to Data Structures in Go! As I have promised, we will look at a special application of stacks. Specifically, we will explore how to convert infix expressions to their postfix equivalents. Postfix notation may not seem intuitive at first, but after following this post, it will become much clearer.
A brief primer &amp;ldquo;Jacob, it&amp;rsquo;s been a whole week since your last post. I don&amp;rsquo;t remember what these are.</description>
      
    </item>
    
    <item>
      <title>Stacks in Go</title>
      <link>https://jpoly1219.github.io/posts/stacks-in-go/</link>
      <pubDate>Sun, 22 May 2022 14:28:38 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/stacks-in-go/</guid>
      
        <description>Welcome back to Introduction to Data Structures in Go! Today, we will look at stacks. Stacks are pretty intuitive to understand and have many different uses. It will also come up a lot in coding interviews because its properties can lead to many cool applications.
What is a stack? Stacks are data structures that follow the LIFO principle. That is, anything that goes in last will come out first. Imagine a stack of plates.</description>
      
    </item>
    
    <item>
      <title>Linked List in Go</title>
      <link>https://jpoly1219.github.io/posts/linked-list-in-go/</link>
      <pubDate>Sun, 15 May 2022 17:58:19 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/linked-list-in-go/</guid>
      
        <description>Welcome to my new series: Introduction to Data Structures in Go! We will start this series with a post about linked lists. If you are a student majoring in computer science, you probably have run into these in your class. Not only are linked lists a part of the CS curriculum, but are also a very popular topic in coding interviews, so it is desirable to have a solid grasp on this topic.</description>
      
    </item>
    
    <item>
      <title>Querying the Database in Go</title>
      <link>https://jpoly1219.github.io/posts/querying-the-database-in-go/</link>
      <pubDate>Sun, 08 May 2022 11:04:19 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/querying-the-database-in-go/</guid>
      
        <description>Welcome back to my tutorial! Last time, we set up an instance of the PostgreSQL database and connected it to our backend. This time, we will use the database and learn how to query it.
A quick intro to SQL databases Although we have set up the database connection, chances are that you still don&amp;rsquo;t understand how a database works. Is it like a file explorer on my computer? How does it store data?</description>
      
    </item>
    
    <item>
      <title>How to Use Gorilla Mux</title>
      <link>https://jpoly1219.github.io/posts/how-to-use-gorilla-mux/</link>
      <pubDate>Sun, 24 Apr 2022 14:20:51 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/how-to-use-gorilla-mux/</guid>
      
        <description>Welcome back to my guide, A Gentle Intro to Golang Web Development. Last time, we looked at how to write handlers for our web app. Now that we know how muxes and handlers work, it is time to use a more sophisticated tool. While Go does have an amazing net/http package, there are certain features that gorilla/mux provides that make our lives easier. Without further ado, let&amp;rsquo;s get into part 3.</description>
      
    </item>
    
    <item>
      <title>Can You Handle This</title>
      <link>https://jpoly1219.github.io/posts/can-you-handle-this/</link>
      <pubDate>Sun, 17 Apr 2022 15:26:15 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/can-you-handle-this/</guid>
      
        <description>Welcome to part 2 of my ongoing series, &amp;ldquo;A Gentle Intro to Golang Web Development.&amp;rdquo; I hope you enjoy it!
Last time, we took a look at muxes. We know that they act as routers that route requests based on matching endpoint patterns. Now it&amp;rsquo;s time to look at how the requests get handled.
Handlers, what are they? Handlers are objects that &amp;ldquo;handle&amp;rdquo; HTTP requests. All handlers implement the Handler interface shown below:</description>
      
    </item>
    
    <item>
      <title>Connecting to Database in Go</title>
      <link>https://jpoly1219.github.io/posts/connecting-to-database-in-go/</link>
      <pubDate>Sun, 17 Apr 2022 13:18:45 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/connecting-to-database-in-go/</guid>
      
        <description>Welcome back to A Gentle Intro to Golang Web Development. Last time, we learned how to use gorilla/mux. This time, we will learn how to set up a database and connect to it. Let&amp;rsquo;s get started!
Start with why It&amp;rsquo;s important to understand why we need a database. A database connection is necessary for most web apps because there needs to be a way to persist data reliably.
We could create a struct and store the data there.</description>
      
    </item>
    
    <item>
      <title>What Even Is a Mux</title>
      <link>https://jpoly1219.github.io/posts/what-even-is-a-mux/</link>
      <pubDate>Sun, 10 Apr 2022 15:48:48 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/what-even-is-a-mux/</guid>
      
        <description>&amp;ldquo;Engineers are bad at naming things.&amp;rdquo;
This holds true for a lot of things. Weird terms, buzzwords, ten different names for the exact same thing&amp;hellip; the list goes on and on. It&amp;rsquo;s a bit embarrassing to admit, but I think one of the most annoying parts of learning Go was how there were jargon and terminologies I had to get used to. You have to go through this when you don&amp;rsquo;t know anything in the beginning and decide to dive in headfirst into a new topic.</description>
      
    </item>
    
    <item>
      <title>Json Processing in Go Marshal or Encode</title>
      <link>https://jpoly1219.github.io/posts/json-processing-in-go-marshal-or-encode/</link>
      <pubDate>Sun, 03 Apr 2022 22:08:55 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/json-processing-in-go-marshal-or-encode/</guid>
      
        <description>If you are like me and want to learn backend development, you probably came across JSON handling at one point. JSON is a very popular format for transferring data between the frontend and the backend. Because it is such an important feature in modern web development, Go adds support for JSON in its encoding/json package.
The problem is that there isn&amp;rsquo;t only one way of doing things. If you have watched a couple of tutorials in the past, you may have noticed people using different functions to handle JSON.</description>
      
    </item>
    
    <item>
      <title>Easy Sorting in Go</title>
      <link>https://jpoly1219.github.io/posts/easy-sorting-in-go/</link>
      <pubDate>Mon, 28 Mar 2022 12:41:50 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/easy-sorting-in-go/</guid>
      
        <description>Sorting is a popular topic among developers. It is one of the most crucial algorithms in computer science because many important algorithms rely on sorted arrays. For example, a binary search algorithm is commonly regarded as one the fastest way to search for something. However, for it to work, we need to provide a sorted array.
I am not going to delve deeply into sorting algorithms here, because it is out of the scope of this post.</description>
      
    </item>
    
    <item>
      <title>How Slices Work in Go</title>
      <link>https://jpoly1219.github.io/posts/how-slices-work-in-go/</link>
      <pubDate>Mon, 21 Mar 2022 12:18:53 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/how-slices-work-in-go/</guid>
      
        <description>Go provides a way for us to group similar data using slices. I guess it&amp;rsquo;s a rather unfamiliar term. At least I haven&amp;rsquo;t seen the term slice being used in any other languages. Being able to use slices well is important, but understanding how it works under the hood is important as well. I think understanding the inner workings is half the fun. In this post, I will explain how slices work in Go.</description>
      
    </item>
    
    <item>
      <title>Watch Out for These Tricky Things in Go 2</title>
      <link>https://jpoly1219.github.io/posts/watch-out-for-these-tricky-things-in-go-2/</link>
      <pubDate>Sun, 06 Mar 2022 22:01:35 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/watch-out-for-these-tricky-things-in-go-2/</guid>
      
        <description>This is a continuation from last week&amp;rsquo;s post, Watch out For These Tricky Things in Go. Hope you enjoy!
An empty interface can be tricky to use. Many beginners tend to get confused by the concept of the empty interface. I was no exception and struggled with it for a while as well.
A quick primer: an interface in Go depicts a set of methods that do similar things. Any type that implements these methods implement that interface.</description>
      
    </item>
    
    <item>
      <title>Watch Out for These Tricky Things in Go</title>
      <link>https://jpoly1219.github.io/posts/watch-out-for-these-tricky-things-in-go/</link>
      <pubDate>Sun, 06 Mar 2022 20:08:30 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/watch-out-for-these-tricky-things-in-go/</guid>
      
        <description>I love Go. I wrote an entire blog post about why I love the language. It is an attractive language with many fun features. Go is considered a relatively easy language, but sometimes it can be tricky. I certainly had my share of challenges that I had to do a lot of research on while learning the language. In this post, I listed some of the things that bummed me out when I was learning Go so that you don&amp;rsquo;t have to struggle like me.</description>
      
    </item>
    
    <item>
      <title>Cs Students You Should Absoutely Join Clubs</title>
      <link>https://jpoly1219.github.io/posts/cs-students-you-should-absoutely-join-clubs/</link>
      <pubDate>Sat, 26 Feb 2022 14:36:52 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/cs-students-you-should-absoutely-join-clubs/</guid>
      
        <description>1. You get to learn lots of soft skills. Being a huge introvert myself, I admit that interpersonal skills aren&amp;rsquo;t the sharpest tool in my shed. Speaking to too many people makes me tired, and after a day of interacting with people, I&amp;rsquo;ll need some time alone to recharge. However, during high school, I learned that being an introvert is not an excuse to neglect my soft skills. I just wanted to hone my claws to become the sharpest ones around, but I realized too late that no one wanted to stay near a feral wolf.</description>
      
    </item>
    
    <item>
      <title>How I Escaped Tutorial Hell</title>
      <link>https://jpoly1219.github.io/posts/how-i-escaped-tutorial-hell/</link>
      <pubDate>Tue, 15 Feb 2022 10:03:14 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/how-i-escaped-tutorial-hell/</guid>
      
        <description>Image generated by Meme Generator
Let me tell you something, kid. A long, long time ago, in a galaxy far, far away, a man, like so many others before him, left to the tutorial hell. Legends say he never returned. Don&amp;rsquo;t be like him.
&amp;ndash; Developer, about to watch his 75th tutorial on how to create a blog web app
When Dante first wrote Inferno, he describes his experience traveling left to the tutorial hell like so many others before him through the nine different circles of hell.</description>
      
    </item>
    
    <item>
      <title>Why I Decided to Become a Web Backend Developer</title>
      <link>https://jpoly1219.github.io/posts/why-i-decided-to-become-a-web-backend-developer/</link>
      <pubDate>Tue, 08 Feb 2022 11:24:04 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/why-i-decided-to-become-a-web-backend-developer/</guid>
      
        <description>I&amp;rsquo;m sure you all have experienced this. You just learned your first language, and you&amp;rsquo;re full of hopes and dreams, even if the only thing you know at the moment is how to write a simple command-line program that takes a user input and does something with it. Awesome! The question that you now have is, &amp;ldquo;What now?&amp;rdquo; This was me after learning Python in codecademy.com. I didn&amp;rsquo;t know what I wanted to do with my newfound powers.</description>
      
    </item>
    
    <item>
      <title>Why I Love Go</title>
      <link>https://jpoly1219.github.io/posts/why-i-love-go/</link>
      <pubDate>Wed, 02 Feb 2022 10:07:58 +0900</pubDate>
      
      <guid>https://jpoly1219.github.io/posts/why-i-love-go/</guid>
      
        <description>Image credits to tottie_designer
I am proud to say that I am a gopher. I probably have the least experience with Go out of all the languages under my belt, but I love it the most. Aside from the cute mascot, I think Go has some amazing features that made me fall in love with the language. I thought it would be fun to share my experiences and thoughts with you guys.</description>
      
    </item>
    
  </channel>
</rss>